var _ = require('underscore');
var async = require('async');
var rest = require('restler');
var server=require('C:/nodeapp/server.js');
console.log('server:'+server);

var CryptoJS = require("crypto-js");
var OAuth   = require('oauth-1.0a');


module.exports = function(settings) {
  if (typeof settings === 'undefined' || !settings.netsuite) {
    throw("You must provide settings containing netsuite credentials");
  }

  var netsuite = settings.netsuite;

  function run(rest_param, callback) {
	  
	  console.log('inside run:');
	  
	  var rest_url_selector=server.rec_type;
console.log('rest_url_selector:'+rest_url_selector);
//var restlet;
if(rest_url_selector=='ProfileView')
{
	var restlet='https://rest.na1.netsuite.com/app/site/hosting/restlet.nl?script=172&deploy=1';
}
else if(rest_url_selector=='PurchaseOrder')
{
	var restlet='https://rest.na1.netsuite.com/app/site/hosting/restlet.nl?script=175&deploy=1';
}

else if(rest_url_selector=='PackingList')
{
	var restlet='https://rest.na1.netsuite.com/app/site/hosting/restlet.nl?script=177&deploy=1';
}
else if(rest_url_selector=='Bills')
{
	var restlet='https://rest.na1.netsuite.com/app/site/hosting/restlet.nl?script=178&deploy=1';
}
	
	//var  json_data = "&param="+JSON.stringify(rest_param);
	var  json_data = JSON.stringify(rest_param);
	console.log('rest_param::'+rest_param);
	console.log('json_data::'+json_data);
	
	var oauth = OAuth(
		{
			consumer: 
			{
				public: '8ddccc016aa75e564138614f2e15c0f13bc28806dd1b1aa887a1991b17b9c413',
				secret: '735b531923afcaa255ea1d53ccbb2847c14e4857e3394ddd4574878fbdb0c5cc'
			},
			signature_method: 'HMAC-SHA1'
		});
		
		
		
		var request_data = 
		{
			url: restlet,
			method: 'POST',
			data: {}
		};
		
		
		
		var token = 
		{
			public: '9ddad1526cfba80f9d4f49c9c540d1aedc4cfc7f65b71e9d09954503b1976e9a',
			secret: '07525846c9f4bbcc4fdb9866cb8fbc370c862f92016112ecd3b6b114b0a5fce4'
		};
		
		
		
		var headerWithRealm = oauth.toHeader(oauth.authorize(request_data, token));
		//console.log("Signature headerWithRealm.Authorization == "+headerWithRealm.Authorization);
		
		
		
		headerWithRealm.Authorization += ', realm="TSTDRV1024523"';
		
		var hd = headerWithRealm.Authorization;
		//console.log("oauth_nonce == "+headerWithRealm.Authorization);
		
		
		
		var restOptions = 
		{
			headers:{'Authorization':hd,'Content-Type':'application/json'},
			data:json_data
		};
		
		//restOptions=(String)restOptions.trim();
		//console.log(restOptions);
	
    function onError(error) { console.log("error reported:"+error.message);
	console.log('inside err:');
    } 
	
    
    //var  json_data = "&param="+JSON.stringify(rest_param);
    //console.log('json_data::'+json_data);
    //columnsQuery = columns ? "&columns="+encodeURIComponent(JSON.stringify(columns)) : ''

    //var queryString = "&type="+type+filtersQuery+columnsQuery;
	//console.log('Request::'+restOptions);
	
	//var  json_data = "&param="+encodeURIComponent(JSON.stringify(rest_param));
	
	//console.log("Before rest.post");
	var globalTunnel = require('global-tunnel');
	//console.log('using env variable for proxy at 113 in netsuitesearch');
	process.env.http_proxy = 'http://proxy.cognizant.com:6050';
	//console.log('setting env variable for proxy at 113 in netsuitesearch');
	globalTunnel.initialize();
	//console.log('set env variable for proxy at 113 in netsuitesearch');
	/*globalTunnel.initialize({
		host: 'proxy.cognizant.com',
		port: 6050
		}); */
	
	//console.log(restlet);

	/*console.log(restOptions);
	
	function trimObj(obj) {
  if (!Array.isArray(obj) && typeof obj != 'object') return obj;
  return Object.keys(obj).reduce(function(acc, key) {
    acc[key.trim()] = typeof obj[key] == 'string'? obj[key].trim() : trimObj(obj[key]);
    return acc;
  }, Array.isArray(obj)? []:{});
}
var res=trimObj(restOptions);
console.log('result ::'+ res);*/
	
	
	var unirest=require('unirest');
	unirest.post(restlet)
	.headers({'Authorization':hd,'Content-Type':'application/json'})
	.send(json_data)
	.end(function(result){callback(null, result);}).on('error',onError).on('fail',function (err){onError(err.error);});
	
	/*rest.post(restlet, restOptions).on('success', function (result) {
      callback(null, result);
	  console.log('inside rest call:');
    }).on('error', onError).on('fail', function (err) { onError(err.error); });*/

	/*
	rest.get(restlet + json_data, restOptions).on('success', function (result) {
      callback(null, result);
    }).on('error', onError).on('fail', function (err) { onError(err.error); });
	*/
  }

  return {
    run: run
  };
};
